@page "/producers"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Blazored.LocalStorage;
@inject Blazored.LocalStorage.ILocalStorageService localStore
@inject IHttpClientFactory ClientFactory
@inject NavigationManager NavManager


<h3>Producers</h3>

@if (producerData == null)
{
    <p>No data to display</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>No</th>
                <th>Name</th>
                <th>Change</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producer in producerData.producers)
            {
                <tr>
                    <td>@producer.id</td>
                    <td>@producer.name</td>
                    <td><a href="/producer/@producer.id/"><button>Change</button></a></td>
                    <td><button @onclick="() => Delete(producer.id)">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
    <button @onclick="() => setPage(this.currentPage - 1 >= 0 ? currentPage - 1 : 0)">Prev</button>
    <button @onclick="() => setPage(this.currentPage + 1 >= this.producerData.maxPage ? 0 : this.currentPage + 1)">Next</button>
    <a href="producer/add"><button>Добавить</button></a>
}



@code {
    private ProducerData producerData { get; set; }
    public int currentPage { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        this.producerData = await this.getData();
    }

    public async Task setPage(int page)
    {
        this.currentPage = page;
        this.producerData = await this.getData();
    }

    public async Task Delete(int id)
    {
        var request = new HttpRequestMessage(HttpMethod.Delete, $"https://localhost:7067/api/producer/{id}");
        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);
        if (response.IsSuccessStatusCode)
        {
            await this.setPage(this.currentPage);
        }
    }

    private async Task<ProducerData> getData()
    {
        var request = new HttpRequestMessage(HttpMethod.Get,
            $"https://localhost:7067/api/producer/GetAll?page={this.currentPage}");

        var client = ClientFactory.CreateClient();

        var token = await localStore.GetItemAsync<string>("token");
        if (token != null)
        {
            request.Headers.Add("Authorization", token);
        }

        var response = await client.SendAsync(request);
        ProducerData? temp = null;
        if (response.IsSuccessStatusCode)
        {
            using var responseStream = await response.Content.ReadAsStreamAsync();
            temp = await JsonSerializer.DeserializeAsync
                <ProducerData>(responseStream);
        }
        else
        {
            NavManager.NavigateTo("/signin");
        }
        return temp;
    }

    public class Producer
    {
        public int id { get; set; }
        public string name { get; set; }
    }

    public class ProducerData
    {
        public List<Producer> producers { get; set; }
        public int totalElements { get; set; }
        public int maxPage {get; set;}
    }
}
